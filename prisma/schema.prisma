generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Orders {
  OrderID        Int       @id(map: "PK__Orders__C3905BAF7CFAF49D") @default(autoincrement())
  OrderDate      DateTime? @default(now(), map: "DF__Orders__OrderDat__5224328E") @db.DateTime
  CustomerID     Int?
  ProductID      Int?
  Quantity       Int?
  ProductsAnthia Products? @relation(fields: [ProductID], references: [ProductID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Orders_ProductsAnthia")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ProductCategories {
  CategoryID           Int    @default(autoincrement())
  CategoryName         String @db.VarChar(25)
  CategoryAbbreviation String @db.Char(2)

  @@ignore
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B6199E821FE") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}

model Users {
  UserID       Int      @default(autoincrement())
  Email        String   @id(map: "PK_Users") @db.VarChar(50) @unique
  FirstName    String?  @db.VarChar(50)
  LastName     String?  @db.VarChar(50)
  Gender       String?  @db.VarChar(3)
  Username     String?  @db.VarChar(30) @unique
  Password     String?  @db.NVarChar(255)
  AgreeToTerms Boolean?
}

model Customers {
  CustomerID Int     @id(map: "PK_CustomersAnthia") @default(autoincrement())
  FirstName  String  @db.NVarChar(50)
  LastName   String  @db.NVarChar(50)
  Address    String? @db.NVarChar(150)
  City       String? @db.NVarChar(50)
  State      String? @db.NVarChar(50)
}

model Products {
  ProductID   Int      @id(map: "PK__Products__B40CC6ED63D7A053") @default(autoincrement())
  Category    String   @db.NVarChar(50)
  Name        String   @db.NVarChar(100)
  RetailPrice Decimal  @db.Decimal(10, 2)
  QtyInStock  Int
  Orders      Orders[]
}
